/* The following code was generated by JFlex 1.4.3 on 01.01.10 14:21 */

/*
 * The pre-processor performs initial parsing steps used to initialize
 * metadata, replace syntax that should not be saved to the database,
 * and prepare the document for the full parsing by the processor.
 */
package org.jamwiki.parser.jflex;

import org.apache.commons.lang.StringUtils;
import org.jamwiki.utils.WikiLogger;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 01.01.10 14:21 from the specification file
 * <tt>C:/galileo/workspace/jamwiki/jamwiki-core/src/main/jflex/jamwiki-preprocessor.jflex</tt>
 */
public class JAMWikiPreProcessor extends JFlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int TEMPLATE = 6;
  public static final int WIKIPRE = 4;
  public static final int YYINITIAL = 0;
  public static final int PRE = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  1,  2,  2,  3,  4,  5, 5
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\27\1\1\1\0\1\0\23\0\1\3\1\30\13\0\1\31"+
    "\1\0\1\12\12\0\1\35\1\0\1\2\1\25\1\11\2\0\1\15"+
    "\1\0\1\13\1\17\1\24\1\37\1\21\1\34\1\7\1\0\1\10"+
    "\1\14\1\36\1\4\1\5\1\26\1\0\1\20\1\16\1\22\1\42"+
    "\1\0\1\6\1\0\1\23\1\0\1\32\1\0\1\33\3\0\1\15"+
    "\1\0\1\13\1\17\1\24\1\37\1\21\1\34\1\7\1\0\1\10"+
    "\1\14\1\36\1\4\1\5\1\26\1\0\1\20\1\16\1\22\1\42"+
    "\1\0\1\6\1\0\1\23\1\0\1\40\1\0\1\41\1\43\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\6\0\10\1\2\2\2\3\1\4\1\5\6\0\1\6"+
    "\1\0\1\7\7\0\1\6\10\0\1\10\13\0\1\10"+
    "\5\0\1\11\2\0\1\12\2\0\1\10\15\0\1\13"+
    "\11\0\1\14\1\0\1\15\54\0\1\12\22\0\1\16"+
    "\13\0\1\17\15\0\1\12\15\0\1\20\4\0\1\21";

  private static int [] zzUnpackAction() {
    int [] result = new int[205];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\44\0\110\0\154\0\220\0\264\0\330\0\374"+
    "\0\u0120\0\u0144\0\u0168\0\u018c\0\u01b0\0\u01d4\0\330\0\u01d4"+
    "\0\330\0\u01f8\0\u021c\0\330\0\u0240\0\u0264\0\u0288\0\u02ac"+
    "\0\u02d0\0\u02f4\0\u0318\0\u033c\0\330\0\u018c\0\u01b0\0\u0360"+
    "\0\u0384\0\u01d4\0\u01f8\0\u03a8\0\330\0\u03cc\0\u03f0\0\u0414"+
    "\0\u0438\0\u045c\0\u0480\0\u04a4\0\u04c8\0\u04ec\0\u0510\0\u0534"+
    "\0\u0558\0\u057c\0\u05a0\0\u05c4\0\u05e8\0\u060c\0\u0630\0\u0654"+
    "\0\u0678\0\u069c\0\u06c0\0\u06e4\0\u0708\0\u072c\0\u0750\0\330"+
    "\0\u0774\0\u0798\0\330\0\u07bc\0\u07e0\0\330\0\u0804\0\u0828"+
    "\0\u084c\0\u0870\0\u0894\0\u08b8\0\u08dc\0\u0900\0\u0924\0\u0948"+
    "\0\u096c\0\u0990\0\u09b4\0\330\0\u09d8\0\u09fc\0\u0a20\0\u0a44"+
    "\0\u0a68\0\u0a8c\0\u0ab0\0\u0ad4\0\u0af8\0\330\0\u0b1c\0\330"+
    "\0\u0b40\0\u0b64\0\u0b88\0\u0bac\0\u0bd0\0\u0bf4\0\u0c18\0\u0c3c"+
    "\0\u0c60\0\u0c84\0\u0ca8\0\u0ccc\0\u0cf0\0\u0d14\0\u0d38\0\u0d5c"+
    "\0\u0d80\0\u0da4\0\u0dc8\0\u0dec\0\u0e10\0\u0e34\0\u0e58\0\u0e7c"+
    "\0\u0ea0\0\u0ec4\0\u0ee8\0\u0f0c\0\u0f30\0\u0f54\0\u0f78\0\u0f9c"+
    "\0\u0fc0\0\u0fe4\0\u1008\0\u102c\0\u1050\0\u1074\0\u1098\0\u10bc"+
    "\0\u10e0\0\u1104\0\u1128\0\u114c\0\u1170\0\u1194\0\u11b8\0\u11dc"+
    "\0\u1200\0\u1224\0\u1248\0\u1170\0\u126c\0\u1290\0\u12b4\0\u12d8"+
    "\0\u12fc\0\u1320\0\u1344\0\u1368\0\u138c\0\u13b0\0\u13d4\0\330"+
    "\0\u13f8\0\u141c\0\u1440\0\u1464\0\u1488\0\u14ac\0\u14d0\0\u14f4"+
    "\0\u1518\0\u153c\0\u1560\0\330\0\u1584\0\u15a8\0\u15cc\0\u15f0"+
    "\0\u1614\0\u1638\0\u165c\0\u1680\0\u16a4\0\u16c8\0\u16ec\0\u1710"+
    "\0\u1734\0\u1290\0\u1758\0\u177c\0\u17a0\0\u17c4\0\u17e8\0\u180c"+
    "\0\u1830\0\u1854\0\u1878\0\u189c\0\u18c0\0\u18e4\0\u1908\0\330"+
    "\0\u192c\0\u1950\0\u1974\0\u1998\0\330";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[205];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\2\7\1\10\27\7\1\11\5\7\1\12\2\7\1\13"+
    "\2\7\1\10\1\14\26\7\1\11\5\7\1\12\2\7"+
    "\1\13\2\7\1\15\43\7\1\16\41\7\2\17\1\20"+
    "\1\14\40\17\2\21\1\22\35\21\1\23\1\24\2\21"+
    "\47\0\1\25\1\26\2\0\1\27\16\0\1\30\1\0"+
    "\1\31\45\0\1\32\51\0\1\33\46\0\1\34\1\35"+
    "\1\0\1\35\1\36\23\35\1\0\14\35\3\0\1\37"+
    "\1\40\5\0\1\41\34\0\1\42\1\40\42\0\1\43"+
    "\1\44\2\0\1\27\74\0\1\45\6\0\1\25\1\26"+
    "\2\0\1\27\16\0\1\30\22\0\1\46\42\0\1\47"+
    "\57\0\1\50\54\0\1\51\12\0\1\52\1\0\1\52"+
    "\1\53\3\52\1\54\23\52\1\0\10\52\40\0\1\55"+
    "\46\0\1\56\5\0\1\57\41\0\1\41\22\0\1\60"+
    "\22\0\1\61\44\0\1\62\1\63\47\0\1\64\54\0"+
    "\1\65\50\0\1\66\12\0\1\52\1\0\31\52\1\67"+
    "\11\52\1\0\1\52\1\53\3\52\1\54\23\52\1\67"+
    "\11\52\1\0\31\52\1\67\2\52\1\70\5\52\1\71"+
    "\1\0\36\71\2\0\2\71\43\0\1\72\6\0\1\62"+
    "\55\0\1\73\32\0\1\63\43\0\1\74\40\0\1\75"+
    "\53\0\1\76\32\0\1\77\5\0\1\100\1\101\31\0"+
    "\31\66\1\102\12\66\33\0\1\103\10\0\1\52\1\0"+
    "\13\52\1\104\15\52\1\67\10\52\1\71\1\0\36\71"+
    "\1\0\1\105\2\71\43\0\1\106\24\0\1\107\27\0"+
    "\1\110\46\0\1\111\72\0\1\112\4\0\1\77\3\0"+
    "\1\113\1\0\1\100\1\101\1\114\1\115\1\0\1\116"+
    "\1\117\2\0\1\120\24\0\1\101\5\0\1\100\32\0"+
    "\31\66\1\121\12\66\1\52\1\0\17\52\1\122\11\52"+
    "\1\67\10\52\41\0\1\123\5\0\1\107\5\0\1\124"+
    "\41\0\1\125\50\0\1\126\46\0\1\127\43\0\1\130"+
    "\40\0\1\131\44\0\1\132\50\0\1\133\30\0\1\134"+
    "\43\0\1\135\34\0\11\66\1\136\17\66\1\121\12\66"+
    "\1\52\1\0\22\52\1\137\6\52\1\67\10\52\41\0"+
    "\1\140\5\0\1\125\5\0\1\141\74\0\1\142\25\0"+
    "\1\143\22\0\1\144\5\0\1\100\1\101\12\0\1\145"+
    "\33\0\1\146\32\0\1\147\62\0\1\150\40\0\1\130"+
    "\45\0\1\150\21\0\1\52\1\0\31\52\1\67\1\52"+
    "\1\151\6\52\2\141\1\152\41\141\17\0\1\153\31\0"+
    "\1\154\41\0\1\144\3\0\1\113\1\0\1\100\1\101"+
    "\1\114\1\115\1\0\1\116\1\117\2\0\1\120\2\0"+
    "\1\145\16\0\1\155\1\0\7\155\1\0\32\155\16\0"+
    "\1\156\46\0\1\130\36\0\1\157\27\0\1\151\1\0"+
    "\30\151\1\160\1\67\10\151\2\141\2\152\6\141\1\161"+
    "\31\141\24\0\1\162\23\0\1\163\37\0\1\155\1\0"+
    "\7\155\1\100\32\155\16\0\1\130\51\0\1\130\17\0"+
    "\1\52\1\0\30\52\1\164\1\67\1\165\1\52\1\166"+
    "\1\167\4\52\2\141\1\152\1\161\1\170\37\141\3\0"+
    "\1\162\5\0\1\171\1\172\45\0\1\173\27\0\1\174"+
    "\1\0\31\174\1\67\10\174\1\52\1\0\20\52\1\175"+
    "\10\52\1\67\11\52\1\0\13\52\1\176\15\52\1\67"+
    "\11\52\1\0\5\52\1\177\12\52\1\200\10\52\1\67"+
    "\10\52\2\141\1\152\2\141\1\201\36\141\2\171\1\202"+
    "\41\171\3\0\1\172\5\0\1\171\55\0\1\203\20\0"+
    "\1\174\1\0\31\174\1\204\10\174\1\52\1\0\20\52"+
    "\1\205\10\52\1\67\11\52\1\0\5\52\1\206\23\52"+
    "\1\67\11\52\1\0\12\52\1\207\16\52\1\67\11\52"+
    "\1\0\24\52\1\210\4\52\1\67\10\52\2\141\1\152"+
    "\3\141\1\211\35\141\2\171\2\202\6\171\1\212\31\171"+
    "\3\0\1\203\5\0\1\213\1\214\64\0\1\215\10\0"+
    "\1\52\1\0\24\52\1\216\4\52\1\67\11\52\1\0"+
    "\12\52\1\217\16\52\1\67\11\52\1\0\22\52\1\210"+
    "\6\52\1\67\11\52\1\0\31\52\1\67\1\52\1\220"+
    "\6\52\2\141\1\152\4\141\1\221\34\141\2\171\1\202"+
    "\1\212\1\222\37\171\2\213\1\223\41\213\3\0\1\214"+
    "\5\0\1\213\32\0\1\224\1\0\30\224\1\225\1\226"+
    "\10\224\1\52\1\0\14\52\1\210\14\52\1\67\1\52"+
    "\1\220\7\52\1\0\20\52\1\227\10\52\1\67\11\52"+
    "\1\0\10\52\1\230\20\52\1\67\10\52\2\141\1\152"+
    "\5\141\1\231\33\141\2\171\1\202\2\171\1\232\36\171"+
    "\2\213\2\223\6\213\1\233\31\213\32\0\1\234\1\0"+
    "\1\235\1\0\1\236\1\237\37\0\1\240\10\0\1\52"+
    "\1\0\3\52\1\241\25\52\1\67\11\52\1\0\10\52"+
    "\1\242\20\52\1\67\10\52\2\141\1\152\4\141\1\243"+
    "\34\141\2\171\1\202\4\171\1\244\34\171\2\213\1\223"+
    "\1\233\3\213\1\245\34\213\1\246\1\0\31\246\1\0"+
    "\10\246\22\0\1\247\36\0\1\250\35\0\1\251\12\0"+
    "\1\252\21\0\1\52\1\0\31\52\1\67\1\52\1\242"+
    "\6\52\1\253\1\0\31\253\1\67\10\253\2\141\1\152"+
    "\1\243\5\141\1\254\32\141\2\171\1\202\1\171\1\255"+
    "\37\171\2\213\1\223\1\213\1\256\37\213\1\246\1\0"+
    "\31\246\1\257\10\246\22\0\1\260\30\0\1\261\50\0"+
    "\1\262\55\0\1\263\15\0\1\253\1\0\31\253\1\264"+
    "\10\253\2\171\1\202\10\171\1\265\30\171\2\213\1\223"+
    "\10\213\1\266\30\213\33\0\1\224\36\0\1\267\31\0"+
    "\1\270\53\0\1\263\54\0\1\271\6\0\1\224\1\0"+
    "\30\224\1\225\1\272\10\224\2\171\1\202\11\171\1\273"+
    "\27\171\2\213\1\223\11\213\1\274\27\213\16\0\1\263"+
    "\16\0\1\271\30\0\1\275\33\0\1\276\31\0\2\171"+
    "\1\202\37\171\1\277\1\171\2\213\1\223\37\213\1\300"+
    "\1\213\5\0\1\301\50\0\1\302\31\0\2\171\1\202"+
    "\14\171\1\303\24\171\2\213\1\223\14\213\1\304\24\213"+
    "\35\0\1\302\6\0\1\305\1\0\31\305\1\0\10\305"+
    "\2\171\1\202\21\171\1\306\17\171\2\213\1\223\21\213"+
    "\1\307\17\213\1\305\1\0\31\305\1\224\10\305\2\171"+
    "\1\202\1\306\5\171\1\310\32\171\2\213\1\223\2\213"+
    "\1\311\40\213\1\223\1\213\1\312\41\213\1\223\11\213"+
    "\1\313\31\213\1\223\20\213\1\314\22\213\1\223\1\314"+
    "\5\213\1\315\32\213";

  private static int [] zzUnpackTrans() {
    int [] result = new int[6588];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\6\0\1\11\7\1\1\11\1\1\1\11\2\1\1\11"+
    "\6\0\1\1\1\0\1\11\7\0\1\11\10\0\1\1"+
    "\13\0\1\1\5\0\1\11\2\0\1\11\2\0\1\11"+
    "\15\0\1\11\11\0\1\11\1\0\1\11\54\0\1\1"+
    "\22\0\1\11\13\0\1\11\15\0\1\1\15\0\1\11"+
    "\4\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[205];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    private static final WikiLogger logger = WikiLogger.getLogger(JAMWikiPreProcessor.class.getName());
    protected int templateCharCount = 0;
    protected String templateString = "";


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public JAMWikiPreProcessor(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public JAMWikiPreProcessor(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 160) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public String yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      if (zzMarkedPosL > zzStartRead) {
        switch (zzBufferL[zzMarkedPosL-1]) {
        case '\n':
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          zzAtBOL = true;
          break;
        case '\r': 
          if (zzMarkedPosL < zzEndReadL)
            zzAtBOL = zzBufferL[zzMarkedPosL] != '\n';
          else if (zzAtEOF)
            zzAtBOL = false;
          else {
            boolean eof = zzRefill();
            zzMarkedPosL = zzMarkedPos;
            zzEndReadL = zzEndRead;
            zzBufferL = zzBuffer;
            if (eof) 
              zzAtBOL = false;
            else 
              zzAtBOL = zzBufferL[zzMarkedPosL] != '\n';
          }
          break;
        default:
          zzAtBOL = false;
        }
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      if (zzAtBOL)
        zzState = ZZ_LEXSTATE[zzLexicalState+1];
      else
        zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 5: 
          { if (logger.isFinerEnabled()) logger.finer("templateendchar: " + yytext() + " (" + yystate() + ")");
    String raw = yytext();
    this.templateString += raw;
    this.templateCharCount -= raw.length();
    if (this.templateCharCount == 0) {
        endState();
        String value = new String(this.templateString);
        this.templateString = "";
        return this.parse(TAG_TYPE_TEMPLATE, value);
    }
    return "";
          }
        case 18: break;
        case 1: 
          { // no need to log this
    return yytext();
          }
        case 19: break;
        case 7: 
          { if (logger.isFinerEnabled()) logger.finer("wikiprestart: " + yytext() + " (" + yystate() + ")");
    // rollback the one non-pre character so it can be processed
    yypushback(yytext().length() - 1);
    if (yystate() != WIKIPRE) {
        beginState(WIKIPRE);
    }
    return yytext();
          }
        case 20: break;
        case 3: 
          { // no need to log this
    String raw = yytext();
    this.templateString += raw;
    return "";
          }
        case 21: break;
        case 14: 
          { if (logger.isFinerEnabled()) logger.finer("imagelinkcaption: " + yytext() + " (" + yystate() + ")");
    return this.parse(TAG_TYPE_WIKI_LINK, yytext());
          }
        case 22: break;
        case 17: 
          { if (logger.isFinerEnabled()) logger.finer("includeonly: " + yytext() + " (" + yystate() + ")");
    return this.parse(TAG_TYPE_INCLUDE_ONLY, yytext());
          }
        case 23: break;
        case 6: 
          { if (logger.isFinerEnabled()) logger.finer("templatestart: " + yytext() + " (" + yystate() + ")");
    String raw = yytext();
    if (!allowTemplates()) {
        return yytext();
    }
    this.templateString += raw;
    this.templateCharCount += 2;
    if (yystate() != TEMPLATE) {
        beginState(TEMPLATE);
    }
    return "";
          }
        case 24: break;
        case 15: 
          { if (logger.isFinerEnabled()) logger.finer("nowiki: " + yytext() + " (" + yystate() + ")");
    return yytext();
          }
        case 25: break;
        case 8: 
          { if (logger.isFinerEnabled()) logger.finer("wikisignature: " + yytext() + " (" + yystate() + ")");
    return this.parse(TAG_TYPE_WIKI_SIGNATURE, yytext());
          }
        case 26: break;
        case 16: 
          { if (logger.isFinerEnabled()) logger.finer("noinclude: " + yytext() + " (" + yystate() + ")");
    return this.parse(TAG_TYPE_NO_INCLUDE, yytext());
          }
        case 27: break;
        case 12: 
          { if (logger.isFinerEnabled()) logger.finer("htmlcomment: " + yytext() + " (" + yystate() + ")");
    if (this.mode < JFlexParser.MODE_PREPROCESS) {
        return yytext();
    }
    // strip out the comment
    return "";
          }
        case 28: break;
        case 4: 
          { if (logger.isFinerEnabled()) logger.finer("templatestartchar: " + yytext() + " (" + yystate() + ")");
    String raw = yytext();
    this.templateString += raw;
    this.templateCharCount += raw.length();
    if (this.templateString.equals("{{{")) {
        // param, not a template
        this.templateCharCount = 0;
        endState();
        String value = new String(this.templateString);
        this.templateString = "";
        return value;
    }
    return "";
          }
        case 29: break;
        case 10: 
          { if (logger.isFinerEnabled()) logger.finer("wikilink: " + yytext() + " (" + yystate() + ")");
    return this.parse(TAG_TYPE_WIKI_LINK, yytext());
          }
        case 30: break;
        case 11: 
          { if (logger.isFinerEnabled()) logger.finer("htmlpreend: " + yytext() + " (" + yystate() + ")");
    // state only changes to pre if allowHTML() is true, so no need to check here
    endState();
    return yytext();
          }
        case 31: break;
        case 9: 
          { if (logger.isFinerEnabled()) logger.finer("htmlprestart: " + yytext() + " (" + yystate() + ")");
    if (allowHTML()) {
        beginState(PRE);
    }
    return yytext();
          }
        case 32: break;
        case 2: 
          { if (logger.isFinerEnabled()) logger.finer("wikipreend: " + yytext() + " (" + yystate() + ")");
    endState();
    // rollback the one non-pre character so it can be processed
    yypushback(1);
    return yytext();
          }
        case 33: break;
        case 13: 
          { if (logger.isFinerEnabled()) logger.finer("templateparam: " + yytext() + " (" + yystate() + ")");
    String raw = yytext();
    return raw;
          }
        case 34: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
              {     StringBuilder output = new StringBuilder();
    if (!StringUtils.isBlank(this.templateString)) {
        // FIXME - this leaves unparsed text
        output.append(this.templateString);
        this.templateString = "";
    }
    return (output.length() == 0) ? null : output.toString();
 }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
